#include "../include/kc.h"
#include "../include/defs.h"
#include "../include/kernel.h"
#include "../include/kasm.h"
#include "../include/stdio.h"

/***************************************************************
*setup_IDT_entry
* Inicializa un descriptor de la IDT
*
*Recibe: Puntero a elemento de la IDT
*	 Selector a cargar en el descriptor de interrupcion
*	 Puntero a rutina de atencion de interrupcion
*	 Derechos de acceso del segmento
*	 Cero
****************************************************************/

unsigned short pciConfigReadWord (unsigned short bus, unsigned short slot, 
				unsigned short func, unsigned short offset);
void lspci();

void setup_IDT_entry (DESCR_INT *item, byte selector, dword offset, byte access,
			 byte cero) {
  item->selector = selector;
  item->offset_l = offset & 0xFFFF;
  item->offset_h = offset >> 16;
  item->access = access;
  item->cero = cero;
}

void lspci()
 {
	int bus, slot;
	unsigned short vendor, device;
	for(bus = 0; bus < 256; bus++){
		for(slot = 0; slot < 32; slot++){
			vendor = pciConfigReadWord(bus,slot,0,0);
			if(vendor != 0xFFFF){
				device = pciConfigReadWord(bus,slot,0,2);
				printf("%d", vendor);
				putc('c');					
				printf("%d", device);
			}
		}	
	}
}

 unsigned short pciConfigReadWord (unsigned short bus, unsigned short slot,
				unsigned short func, unsigned short offset)
 {
    unsigned long address;
    unsigned long longBus = (unsigned long)bus;
    unsigned long longSlot = (unsigned long)slot;
    unsigned long longFunc = (unsigned long)func;
    unsigned short tmp = 0;
 
    address = (unsigned long)((longBus << 16) | (longSlot << 11) | (longFunc << 8) 
				| (offset & 0xfc) | ((unsigned long)0x80000000));
 
    _outl(0x0CF8, address);

    tmp = (unsigned short)((_inl(0x0CFC) >> ((offset & 2) * 8)) & 0xffff);
    return (tmp);
 }
